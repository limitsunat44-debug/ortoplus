// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMS API
const SMS_CONFIG = {
    login: 'ortoplustj',
    hash: 'a52e96c812d0b30aee23cc3ebd93d98a',
    sender: 'Ortoplus',
    server: 'https://api.osonsms.com/sendsms_v1.php'
};

// –ù–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
const CLOUD_SYNC_CONFIG = {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSONBin.io –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    binId: '68ebc131d0ea881f409f1d60', // ID –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π!)
    apiKey: '$2a$10$KN9N1PK8kpK3RnH46uDtY.XRG51JVUumStqkC0lETjQcZU7tJX/7K', // –í–∞—à API –∫–ª—é—á
    baseUrl: 'https://api.jsonbin.io/v3/b',
    enabled: true // –í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –æ–±–ª–∞–∫–æ–º
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let verificationTxnId = null;
let currentPhone = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    const savedUser = localStorage.getItem('ortosalon_user');
    if (savedUser) {
        try {
            currentUser = JSON.parse(savedUser);
            showDashboard();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            localStorage.removeItem('ortosalon_user');
        }
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async function sendVerificationCode() {
    const countryCode = document.getElementById('countryCode').value;
    const phoneNumber = document.getElementById('phoneNumber').value.trim();
    const errorDiv = document.getElementById('phoneError');
    
    if (!phoneNumber) {
        showError(errorDiv, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –¥–ª—è API (992XXXXXXXXX)
    let formattedPhone = phoneNumber.replace(/[^0-9]/g, '');
    if (countryCode === '+992' && !formattedPhone.startsWith('992')) {
        formattedPhone = '992' + formattedPhone;
    }
    
    currentPhone = countryCode + phoneNumber;
    verificationTxnId = Date.now().toString();
    
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
    const message = `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è OrtosalonTj: ${verificationCode}`;
    
    console.log('üì± –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:', verificationCode);
    console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', currentPhone);
    
    try {
        showError(errorDiv, ''); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏
        document.querySelector('#phoneStep button').disabled = true;
        document.querySelector('#phoneStep button').textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        
        // –°–æ–∑–¥–∞—ë–º —Ö–µ—à –¥–ª—è API
        const hashString = `${verificationTxnId};${SMS_CONFIG.login};${SMS_CONFIG.sender};${formattedPhone};${SMS_CONFIG.hash}`;
        const hash = await createSHA256Hash(hashString);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        localStorage.setItem('verification_code', verificationCode);
        localStorage.setItem('verification_phone', currentPhone);
        
        // –í–°–ï–ì–î–ê –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç—Ç–∞–ø –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        document.getElementById('sentToNumber').textContent = `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä ${currentPhone}`;
        showStep('codeStep');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ Oson API –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        try {
            const smsUrl = `${SMS_CONFIG.server}?from=${SMS_CONFIG.sender}&phone_number=${formattedPhone}&msg=${encodeURIComponent(message)}&login=${SMS_CONFIG.login}&str_hash=${hash}&txn_id=${verificationTxnId}`;
            
            const response = await fetch(smsUrl);
            const result = await response.json();
            
            if (response.status !== 201 || result.status !== 'ok') {
                console.warn('SMS API –æ—à–∏–±–∫–∞:', result);
                showError(document.getElementById('codeError'), '–í–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π SMS');
            }
        } catch (smsError) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', smsError);
            showError(document.getElementById('codeError'), '–í–æ–∑–º–æ–∂–Ω—ã –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π SMS');
        }
        
    } catch (error) {
        console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
        document.getElementById('sentToNumber').textContent = `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä ${currentPhone}`;
        showStep('codeStep');
    } finally {
        document.querySelector('#phoneStep button').disabled = false;
        document.querySelector('#phoneStep button').textContent = '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥';
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ SHA256 —Ö–µ—à–∞
async function createSHA256Hash(text) {
    const encoder = new TextEncoder();
    const data = encoder.encode(text);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞—á–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
async function syncWithCloud(userData) {
    if (!CLOUD_SYNC_CONFIG.enabled) {
        console.log('‚òÅÔ∏è –û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        return;
    }

    try {
        console.log('‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–ª–∞–∫–æ–º...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞
        let cloudUsers = await getCloudUsers();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const existingUserIndex = cloudUsers.findIndex(u => u.phone === userData.phone);
        
        if (existingUserIndex !== -1) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cloudUsers[existingUserIndex] = userData;
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±–ª–∞–∫–µ');
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cloudUsers.push(userData);
            console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±–ª–∞–∫–æ');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–æ
        await saveCloudUsers(cloudUsers);
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º:', error);
        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–ª–∞–∫–∞
async function getCloudUsers() {
    try {
        const response = await fetch(`${CLOUD_SYNC_CONFIG.baseUrl}/${CLOUD_SYNC_CONFIG.binId}`, {
            method: 'GET',
            headers: {
                'X-Master-Key': CLOUD_SYNC_CONFIG.apiKey,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            return Array.isArray(result.record) ? result.record : [];
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ');
            return [];
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞:', error);
        return [];
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±–ª–∞–∫–æ
async function saveCloudUsers(users) {
    try {
        const response = await fetch(`${CLOUD_SYNC_CONFIG.baseUrl}/${CLOUD_SYNC_CONFIG.binId}`, {
            method: 'PUT',
            headers: {
                'X-Master-Key': CLOUD_SYNC_CONFIG.apiKey,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(users)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚òÅÔ∏è –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–±–ª–∞–∫–æ:', result);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–æ:', error);
        throw error;
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async function verifyCode() {
    const enteredCode = document.getElementById('verificationCode').value.trim();
    const savedCode = localStorage.getItem('verification_code');
    const errorDiv = document.getElementById('codeError');
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞:', enteredCode, 'vs', savedCode);
    
    if (!enteredCode) {
        showError(errorDiv, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ (—Ä–µ–∞–ª—å–Ω—ã–π –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π 123456)
    if (enteredCode === savedCode || enteredCode === '123456') {
        console.log('‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π!');
        
        // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–Ω–∞—á–∞–ª–∞ –∏–∑ –æ–±–ª–∞–∫–∞, –ø–æ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ)
        let existingUsers = [];
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–ª–∞–∫–∞
            if (CLOUD_SYNC_CONFIG.enabled) {
                console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–ª–∞–∫–∞...');
                existingUsers = await getCloudUsers();
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏
                localStorage.setItem('ortosalon_users', JSON.stringify(existingUsers));
                localStorage.setItem('admin_users', JSON.stringify(existingUsers));
            }
        } catch (cloudError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (existingUsers.length === 0) {
            try {
                const storedUsers = localStorage.getItem('ortosalon_users');
                if (storedUsers && storedUsers !== 'null' && storedUsers !== 'undefined') {
                    const parsed = JSON.parse(storedUsers);
                    existingUsers = Array.isArray(parsed) ? parsed : [];
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
                existingUsers = [];
            }
        }
        
        console.log('üë• –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', existingUsers);
        
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = null;
        if (Array.isArray(existingUsers)) {
            user = existingUsers.find(u => u && u.phone === currentPhone);
        }
        
        if (!user) {
            console.log('üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            user = createNewUser(currentPhone);
            existingUsers.push(user);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            try {
                localStorage.setItem('ortosalon_users', JSON.stringify(existingUsers));
                localStorage.setItem('admin_users', JSON.stringify(existingUsers));
                console.log('üíæ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            }
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–±–ª–∞–∫–æ–º
            await syncWithCloud(user);
            
        } else {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user);
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
            user.lastLogin = new Date().toISOString();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            const userIndex = existingUsers.findIndex(u => u.id === user.id);
            if (userIndex !== -1) {
                existingUsers[userIndex] = user;
                localStorage.setItem('ortosalon_users', JSON.stringify(existingUsers));
                localStorage.setItem('admin_users', JSON.stringify(existingUsers));
            }
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –æ–±–ª–∞–∫–æ–º
            await syncWithCloud(user);
        }
        
        currentUser = user;
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            localStorage.setItem('ortosalon_user', JSON.stringify(user));
            console.log('üíæ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('verification_code');
        localStorage.removeItem('verification_phone');
        
        console.log('üè† –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç...');
        showDashboard();
        
    } else {
        console.log('‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π');
        showError(errorDiv, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createNewUser(phone) {
    const userId = Date.now();
    const eanCode = generateEAN13();
    
    const newUser = {
        id: userId,
        phone: phone || '',
        name: '',
        eanCode: eanCode,
        createdAt: new Date().toISOString(),
        lastLogin: new Date().toISOString()
    };
    
    console.log('üë®‚Äçüíº –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser);
    return newUser;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è EAN-13 —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
function generateEAN13() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 12-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    let code = '';
    for (let i = 0; i < 12; i++) {
        code += Math.floor(Math.random() * 10);
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É
    let sum = 0;
    for (let i = 0; i < 12; i++) {
        const digit = parseInt(code[i]);
        sum += (i % 2 === 0) ? digit : digit * 3;
    }
    const checkDigit = (10 - (sum % 10)) % 10;
    
    return code + checkDigit;
}

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–∞—à–±–æ—Ä–¥–∞
function showDashboard() {
    console.log('üè† –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', currentUser);
    
    try {
        const authForm = document.getElementById('authForm');
        const userDashboard = document.getElementById('userDashboard');
        
        if (!authForm || !userDashboard) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return;
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        authForm.style.display = 'none';
        userDashboard.style.display = 'block';
        
        console.log('‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω');
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π (—É–±—Ä–∞–ª–∏ email)
        const userNameInput = document.getElementById('userName');
        const userPhoneInput = document.getElementById('userPhone');
        
        if (userNameInput) userNameInput.value = currentUser.name || '';
        if (userPhoneInput) userPhoneInput.value = currentUser.phone || '';
        
        console.log('‚úÖ –ü–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ù–ê–°–¢–û–Ø–©–ò–ô —à—Ç—Ä–∏—Ö–∫–æ–¥
        displayRealBarcode(currentUser.eanCode);
        
        console.log('üéâ –î–∞—à–±–æ—Ä–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ showDashboard():', error);
    }
}

// –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ù–ê–°–¢–û–Ø–©–ï–ì–û —Å–∫–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
function displayRealBarcode(eanCode) {
    const barcodeDisplay = document.getElementById('barcodeDisplay');
    const barcodeNumber = document.getElementById('barcodeNumber');
    
    if (barcodeDisplay && barcodeNumber && eanCode) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º JsBarcode –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ EAN-13 —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
            JsBarcode(barcodeDisplay, eanCode, {
                format: "EAN13",
                width: 2,
                height: 80,
                displayValue: true,
                fontSize: 14,
                textMargin: 8,
                fontOptions: "bold",
                font: "Arial",
                textAlign: "center",
                lineColor: "#000000",
                background: "#ffffff"
            });
            
            barcodeNumber.textContent = eanCode;
            console.log('üè∑Ô∏è –ù–ê–°–¢–û–Ø–©–ò–ô —à—Ç—Ä–∏—Ö–∫–æ–¥ EAN-13 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', eanCode);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞:', error);
            // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            barcodeDisplay.innerHTML = `
                <div style="padding: 20px; border: 2px solid #000; background: white; text-align: center;">
                    <div style="font-family: monospace; font-size: 18px;">||||| ${eanCode} |||||</div>
                </div>
            `;
            barcodeNumber.textContent = eanCode;
        }
    } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥ - —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
async function updateProfile() {
    if (!currentUser) {
        alert('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
    }
    
    const name = document.getElementById('userName').value.trim();
    
    currentUser.name = name;
    currentUser.lastLogin = new Date().toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    try {
        localStorage.setItem('ortosalon_user', JSON.stringify(currentUser));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
        let allUsers = [];
        const storedUsers = localStorage.getItem('ortosalon_users');
        if (storedUsers) {
            const parsed = JSON.parse(storedUsers);
            allUsers = Array.isArray(parsed) ? parsed : [];
        }
        
        const userIndex = allUsers.findIndex(u => u && u.id === currentUser.id);
        if (userIndex !== -1) {
            allUsers[userIndex] = currentUser;
            localStorage.setItem('ortosalon_users', JSON.stringify(allUsers));
            localStorage.setItem('admin_users', JSON.stringify(allUsers));
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–±–ª–∞–∫–æ–º
        await syncWithCloud(currentUser);
        
        alert('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
    }
}

// –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞
function resendCode() {
    showStep('phoneStep');
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
function logout() {
    currentUser = null;
    localStorage.removeItem('ortosalon_user');
    
    document.getElementById('userDashboard').style.display = 'none';
    document.getElementById('authForm').style.display = 'block';
    showStep('phoneStep');
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—ã
    document.getElementById('phoneNumber').value = '';
    document.getElementById('verificationCode').value = '';
    
    console.log('üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ —Ñ–æ—Ä–º—ã
function showStep(stepId) {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç—Ç–∞–ø:', stepId);
    
    document.querySelectorAll('.form-step').forEach(step => {
        step.classList.remove('active');
        step.style.display = 'none';
    });
    
    const targetStep = document.getElementById(stepId);
    if (targetStep) {
        targetStep.classList.add('active');
        targetStep.style.display = 'block';
        console.log('‚úÖ –≠—Ç–∞–ø –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω');
    } else {
        console.error('‚ùå –≠—Ç–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω:', stepId);
    }
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(errorDiv, message) {
    if (errorDiv) {
        errorDiv.textContent = message;
        if (message) console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞:', message);
    }
}
