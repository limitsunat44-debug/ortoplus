// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
const ADMIN_CREDENTIALS = {
    username: 'admin',
    password: 'ortosalon2024'
};

// –ù–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è Supabase
const SUPABASE_CONFIG = {
    url: 'https://mvjiqysmcclvceswfqwv.supabase.co', // –ù–∞–ø—Ä–∏–º–µ—Ä: https://xyzcompany.supabase.co
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im12amlxeXNtY2NsdmNlc3dmcXd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE0MDUyOTYsImV4cCI6MjA3Njk4MTI5Nn0.FoRyIZ9E4M2ZwEE8Kh4hDdkBDLuhyqRut7VEKG4uQkk', // –ê–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞
    tableName: 'loyalty_users_plus' // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
let supabase;
if (typeof supabase === 'undefined') {
    supabase = window.supabase.createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);
}

let currentAdmin = null;
let allUsers = [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∞–¥–º–∏–Ω —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    const savedAdmin = localStorage.getItem('ortosalon_admin');
    if (savedAdmin) {
        currentAdmin = JSON.parse(savedAdmin);
        showAdminDashboard();
    }
});

// –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function adminLogin() {
    const username = document.getElementById('adminUsername').value.trim();
    const password = document.getElementById('adminPassword').value.trim();
    const errorDiv = document.getElementById('loginError');

    if (!username || !password) {
        showError(errorDiv, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
        return;
    }

    if (username === ADMIN_CREDENTIALS.username && password === ADMIN_CREDENTIALS.password) {
        currentAdmin = {
            username: username,
            loginTime: new Date().toISOString()
        };
        localStorage.setItem('ortosalon_admin', JSON.stringify(currentAdmin));
        showAdminDashboard();
    } else {
        showError(errorDiv, '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
}

// –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async function showAdminDashboard() {
    document.getElementById('adminLogin').style.display = 'none';
    document.getElementById('adminDashboard').style.display = 'block';
    document.getElementById('currentAdmin').textContent = currentAdmin.username;

    await loadUsers();
    updateStats();
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase
async function loadUsers() {
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase...');

    try {
        const { data, error } = await supabase
            .from(SUPABASE_CONFIG.tableName)
            .select('*')
            .order('created_at', { ascending: false });

        if (error) throw error;

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        allUsers = data.map(user => ({
            id: user.id,
            phone: user.phone,
            name: user.name || '',
            eanCode: user.ean_code,
            createdAt: user.created_at,
            lastLogin: user.last_login
        }));

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
        localStorage.setItem('admin_users', JSON.stringify(allUsers));

        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Supabase:', error);

        // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const localData = localStorage.getItem('admin_users');
        allUsers = localData ? JSON.parse(localData) : [];
        console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    }

    displayUsers(allUsers);
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
function subscribeToRealtimeChanges() {
    console.log('üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...');

    supabase
        .channel('loyalty_users_changes')
        .on('postgres_changes', 
            { 
                event: '*', 
                schema: 'public', 
                table: SUPABASE_CONFIG.tableName 
            }, 
            (payload) => {
                console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:', payload);
                loadUsers(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            }
        )
        .subscribe();
}

// –í—ã–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
const originalShowAdminDashboard = showAdminDashboard;
showAdminDashboard = async function() {
    await originalShowAdminDashboard();
    subscribeToRealtimeChanges();
};

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
function displayUsers(users) {
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = '';

    users.forEach(user => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${user.id}</td>
            <td>${user.phone}</td>
            <td>${user.name || '<em>–Ω–µ —É–∫–∞–∑–∞–Ω–æ</em>'}</td>
            <td><code>${user.eanCode}</code></td>
            <td>${formatDate(user.createdAt)}</td>
            <td>${formatDate(user.lastLogin)}</td>
            <td>
                <button onclick="editUser(${user.id})" class="btn-edit">‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å</button>
                <button onclick="deleteUser(${user.id})" class="btn-delete">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const totalUsers = allUsers.length;
    const usersWithNames = allUsers.filter(u => u.name && u.name.trim() !== '').length;
    const recentUsers = allUsers.filter(u => {
        const created = new Date(u.createdAt);
        const weekAgo = new Date();
        weekAgo.setDate(weekAgo.getDate() - 7);
        return created >= weekAgo;
    }).length;

    document.getElementById('totalUsers').textContent = totalUsers;
    document.getElementById('usersWithNames').textContent = usersWithNames;
    document.getElementById('recentUsers').textContent = recentUsers;
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function editUser(userId) {
    const user = allUsers.find(u => u.id === userId);
    if (!user) {
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name);
    if (newName === null) return; // –û—Ç–º–µ–Ω–∞

    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ Supabase
        const { data, error } = await supabase
            .from(SUPABASE_CONFIG.tableName)
            .update({ 
                name: newName.trim(),
                updated_at: new Date().toISOString()
            })
            .eq('id', userId)
            .select();

        if (error) throw error;

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω –≤ Supabase');

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        user.name = newName.trim();
        const userIndex = allUsers.findIndex(u => u.id === userId);
        if (userIndex !== -1) {
            allUsers[userIndex] = user;
            localStorage.setItem('admin_users', JSON.stringify(allUsers));
        }

        displayUsers(allUsers);
        updateStats();
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUser(userId) {
    const user = allUsers.find(u => u.id === userId);
    if (!user) {
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name || user.phone}?`)) {
        return;
    }

    try {
        // –£–¥–∞–ª—è–µ–º –∏–∑ Supabase
        const { error } = await supabase
            .from(SUPABASE_CONFIG.tableName)
            .delete()
            .eq('id', userId);

        if (error) throw error;

        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ Supabase');

        // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        allUsers = allUsers.filter(u => u.id !== userId);
        localStorage.setItem('admin_users', JSON.stringify(allUsers));

        displayUsers(allUsers);
        updateStats();
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message);
    }
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function searchUsers() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();

    if (!searchTerm) {
        displayUsers(allUsers);
        return;
    }

    const filtered = allUsers.filter(user => {
        return user.phone.toLowerCase().includes(searchTerm) ||
               (user.name && user.name.toLowerCase().includes(searchTerm)) ||
               user.eanCode.includes(searchTerm);
    });

    displayUsers(filtered);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
function exportToCSV() {
    if (allUsers.length === 0) {
        alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
    }

    const headers = ['ID', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ò–º—è', '–®—Ç—Ä–∏—Ö–∫–æ–¥', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥'];
    const rows = allUsers.map(user => [
        user.id,
        user.phone,
        user.name || '',
        user.eanCode,
        formatDate(user.createdAt),
        formatDate(user.lastLogin)
    ]);

    let csvContent = headers.join(',') + '\n';
    rows.forEach(row => {
        csvContent += row.map(cell => `"${cell}"`).join(',') + '\n';
    });

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);

    link.setAttribute('href', url);
    link.setAttribute('download', `ortosalon_users_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';

    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è)
async function syncWithCloud() {
    const syncBtn = document.querySelector('button[onclick="syncWithCloud()"]');
    if (syncBtn) {
        syncBtn.disabled = true;
        syncBtn.textContent = '‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...';
    }

    try {
        await loadUsers();
        alert('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ' + error.message);
    } finally {
        if (syncBtn) {
            syncBtn.disabled = false;
            syncBtn.textContent = 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å';
        }
    }
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
function adminLogout() {
    localStorage.removeItem('ortosalon_admin');
    currentAdmin = null;
    location.reload();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDate(dateString) {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function showError(element, message) {
    if (element) {
        element.textContent = message;
        element.style.display = message ? 'block' : 'none';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –≤—Ö–æ–¥–∞
document.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        const loginForm = document.getElementById('adminLogin');
        if (loginForm && loginForm.style.display !== 'none') {
            adminLogin();
        }
    }
});
