// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
const ADMIN_CREDENTIALS = {
    username: 'admin',
    password: 'ortosalon2024'
};

// –ù–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
const CLOUD_SYNC_CONFIG = {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSONBin.io –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    binId: '68e78e8aae596e708f0bb24e', // ID –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ—Ç –∂–µ —á—Ç–æ –≤ user-script)
    apiKey: '$2a$10$YC7NQGItIeryJjaqSp/7oes7nTxC1YKQ9M3VVomFXDImvTlKn6QUm', // –í–∞—à API –∫–ª—é—á
    baseUrl: 'https://api.jsonbin.io/v3/b',
    enabled: true // –í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –æ–±–ª–∞–∫–æ–º
};

let currentAdmin = null;
let allUsers = [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∞–¥–º–∏–Ω —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    const savedAdmin = localStorage.getItem('ortosalon_admin');
    if (savedAdmin) {
        currentAdmin = JSON.parse(savedAdmin);
        showAdminDashboard();
    }
});

// –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function adminLogin() {
    const username = document.getElementById('adminUsername').value.trim();
    const password = document.getElementById('adminPassword').value.trim();
    const errorDiv = document.getElementById('loginError');
    
    if (!username || !password) {
        showError(errorDiv, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
        return;
    }
    
    if (username === ADMIN_CREDENTIALS.username && password === ADMIN_CREDENTIALS.password) {
        currentAdmin = {
            username: username,
            loginTime: new Date().toISOString()
        };
        
        localStorage.setItem('ortosalon_admin', JSON.stringify(currentAdmin));
        showAdminDashboard();
    } else {
        showError(errorDiv, '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
}

// –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async function showAdminDashboard() {
    document.getElementById('adminLogin').style.display = 'none';
    document.getElementById('adminDashboard').style.display = 'block';
    document.getElementById('currentAdmin').textContent = currentAdmin.username;
    
    await loadUsers();
    updateStats();
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å –æ–±–ª–∞–∫–æ–º
async function loadUsers() {
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞
    if (CLOUD_SYNC_CONFIG.enabled) {
        try {
            console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–ª–∞–∫–∞...');
            const cloudUsers = await getCloudUsers();
            
            if (cloudUsers.length > 0) {
                allUsers = cloudUsers;
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏
                localStorage.setItem('admin_users', JSON.stringify(allUsers));
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–ª–∞–∫–∞`);
            } else {
                console.log('‚ö†Ô∏è –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                allUsers = JSON.parse(localStorage.getItem('admin_users') || '[]');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –æ–±–ª–∞–∫–∞:', error);
            allUsers = JSON.parse(localStorage.getItem('admin_users') || '[]');
        }
    } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        allUsers = JSON.parse(localStorage.getItem('admin_users') || '[]');
    }
    
    displayUsers(allUsers);
    console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–ª–∞–∫–∞
async function getCloudUsers() {
    try {
        const response = await fetch(`${CLOUD_SYNC_CONFIG.baseUrl}/${CLOUD_SYNC_CONFIG.binId}`, {
            method: 'GET',
            headers: {
                'X-Master-Key': CLOUD_SYNC_CONFIG.apiKey,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            return Array.isArray(result.record) ? result.record : [];
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ');
            return [];
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞:', error);
        return [];
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±–ª–∞–∫–æ
async function saveCloudUsers(users) {
    try {
        const response = await fetch(`${CLOUD_SYNC_CONFIG.baseUrl}/${CLOUD_SYNC_CONFIG.binId}`, {
            method: 'PUT',
            headers: {
                'X-Master-Key': CLOUD_SYNC_CONFIG.apiKey,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(users)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('‚òÅÔ∏è –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–±–ª–∞–∫–æ:', result);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–æ:', error);
        throw error;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
function displayUsers(users) {
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = '';
    
    users.forEach(user => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${user.id}</td>
            <td>${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
            <td>${user.phone}</td>
            <td>
                <code style="background: #f8f9fa; padding: 2px 6px; border-radius: 3px; font-size: 12px;">
                    ${user.eanCode}
                </code>
            </td>
            <td>${formatDate(user.createdAt)}</td>
            <td>
                <div class="action-buttons">
                    <button onclick="editUser(${user.id})" class="btn-edit">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button onclick="deleteUser(${user.id})" class="btn-delete">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </td>
        `;
        tbody.appendChild(row);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const today = new Date().toDateString();
    const newUsersToday = allUsers.filter(user => 
        new Date(user.createdAt).toDateString() === today
    ).length;
    
    const activeUsers = allUsers.filter(user => {
        const lastLogin = new Date(user.lastLogin || user.createdAt);
        const daysSince = (Date.now() - lastLogin.getTime()) / (1000 * 60 * 60 * 24);
        return daysSince <= 30; // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    }).length;
    
    document.getElementById('totalUsers').textContent = allUsers.length;
    document.getElementById('newUsersToday').textContent = newUsersToday;
    document.getElementById('activeUsers').textContent = activeUsers;
}

// –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function filterUsers() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
    
    if (!searchTerm) {
        displayUsers(allUsers);
        return;
    }
    
    const filteredUsers = allUsers.filter(user => 
        user.phone.toLowerCase().includes(searchTerm) ||
        (user.name && user.name.toLowerCase().includes(searchTerm)) ||
        user.eanCode.includes(searchTerm)
    );
    
    displayUsers(filteredUsers);
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function refreshUserList() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const refreshBtn = document.querySelector('.btn-refresh');
    const originalText = refreshBtn.textContent;
    refreshBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    refreshBtn.disabled = true;
    
    try {
        await loadUsers();
        updateStats();
        document.getElementById('searchInput').value = '';
        console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
        refreshBtn.textContent = originalText;
        refreshBtn.disabled = false;
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function editUser(userId) {
    const user = allUsers.find(u => u.id === userId);
    if (!user) return;
    
    document.getElementById('editUserId').value = user.id;
    document.getElementById('editUserName').value = user.name || '';
    document.getElementById('editUserPhone').value = user.phone;
    document.getElementById('editUserEAN').value = user.eanCode;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
    document.getElementById('barcodePreview').innerHTML = '';
    
    document.getElementById('editUserModal').classList.add('active');
}

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
function previewBarcodeImage() {
    const fileInput = document.getElementById('barcodeImage');
    const preview = document.getElementById('barcodePreview');
    
    if (fileInput.files && fileInput.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
            preview.innerHTML = `<img src="${e.target.result}" alt="–®—Ç—Ä–∏—Ö–∫–æ–¥">`;
        };
        reader.readAsDataURL(fileInput.files[0]);
    }
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
async function saveUserChanges() {
    const userId = parseInt(document.getElementById('editUserId').value);
    const name = document.getElementById('editUserName').value.trim();
    const phone = document.getElementById('editUserPhone').value.trim();
    const eanCode = document.getElementById('editUserEAN').value.trim();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!phone) {
        alert('–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
        return;
    }
    
    if (eanCode && eanCode.length !== 13) {
        alert('EAN –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 13 —Ü–∏—Ñ—Ä');
        return;
    }
    
    // –ù–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–∏–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    const userIndex = allUsers.findIndex(u => u.id === userId);
    if (userIndex !== -1) {
        allUsers[userIndex] = {
            ...allUsers[userIndex],
            name: name,
            phone: phone,
            eanCode: eanCode || allUsers[userIndex].eanCode,
            updatedAt: new Date().toISOString()
        };
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('admin_users', JSON.stringify(allUsers));
            
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            const ortosalonUsers = JSON.parse(localStorage.getItem('ortosalon_users') || '[]');
            const ortosalonUserIndex = ortosalonUsers.findIndex(u => u.id === userId);
            if (ortosalonUserIndex !== -1) {
                ortosalonUsers[ortosalonUserIndex] = allUsers[userIndex];
                localStorage.setItem('ortosalon_users', JSON.stringify(ortosalonUsers));
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            const currentUser = JSON.parse(localStorage.getItem('ortosalon_user') || 'null');
            if (currentUser && currentUser.id === userId) {
                localStorage.setItem('ortosalon_user', JSON.stringify(allUsers[userIndex]));
            }
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–±–ª–∞–∫–æ–º
            if (CLOUD_SYNC_CONFIG.enabled) {
                await saveCloudUsers(allUsers);
                console.log('‚òÅÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º');
            }
            
            closeEditModal();
            displayUsers(allUsers);
            updateStats();
            alert('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
async function confirmDeleteUser() {
    const userId = parseInt(document.getElementById('deleteUserId').value);
    
    try {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        allUsers = allUsers.filter(u => u.id !== userId);
        localStorage.setItem('admin_users', JSON.stringify(allUsers));
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        const ortosalonUsers = JSON.parse(localStorage.getItem('ortosalon_users') || '[]');
        const updatedOrtosalonUsers = ortosalonUsers.filter(u => u.id !== userId);
        localStorage.setItem('ortosalon_users', JSON.stringify(updatedOrtosalonUsers));
        
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        const currentUser = JSON.parse(localStorage.getItem('ortosalon_user') || 'null');
        if (currentUser && currentUser.id === userId) {
            localStorage.removeItem('ortosalon_user');
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–±–ª–∞–∫–æ–º
        if (CLOUD_SYNC_CONFIG.enabled) {
            await saveCloudUsers(allUsers);
            console.log('‚òÅÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –æ–±–ª–∞–∫–æ–º');
        }
        
        closeDeleteModal();
        displayUsers(allUsers);
        updateStats();
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function deleteUser(userId) {
    document.getElementById('deleteUserId').value = userId;
    document.getElementById('deleteConfirmModal').classList.add('active');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function closeEditModal() {
    document.getElementById('editUserModal').classList.remove('active');
}

function closeDeleteModal() {
    document.getElementById('deleteConfirmModal').classList.remove('active');
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
function adminLogout() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
        currentAdmin = null;
        localStorage.removeItem('ortosalon_admin');
        document.getElementById('adminDashboard').style.display = 'none';
        document.getElementById('adminLogin').style.display = 'flex';
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤—Ö–æ–¥–∞
        document.getElementById('adminUsername').value = '';
        document.getElementById('adminPassword').value = '';
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(errorDiv, message) {
    errorDiv.textContent = message;
    setTimeout(() => {
        errorDiv.textContent = '';
    }, 5000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
window.onclick = function(event) {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        if (event.target === modal) {
            modal.classList.remove('active');
        }
    });
}