// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∞
const ADMIN_CREDENTIALS = {
    username: 'admin',
    password: 'ortosalon2024'
};

// –ù–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
const CLOUD_SYNC_CONFIG = {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º JSONBin.io –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     binId: '68ebc131d0ea881f409f1d60', // ID –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ—Ç –∂–µ —á—Ç–æ –≤ user-script)
    apiKey: '$2a$10$KN9N1PK8kpK3RnH46uDtY.XRG51JVUumStqkC0lETjQcZU7tJX/7K', // –í–∞—à API –∫–ª—é—á
    baseUrl: 'https://api.jsonbin.io/v3/b',
    enabled: true // –í–∫–ª—é—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –æ–±–ª–∞–∫–æ–º
};

let currentAdmin = null;
let allUsers = [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∞–¥–º–∏–Ω —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    const savedAdmin = localStorage.getItem('ortosalon_admin');
    if (savedAdmin) {
        currentAdmin = JSON.parse(savedAdmin);
        showAdminDashboard();
    }
});

// –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function adminLogin() {
    const username = document.getElementById('adminUsername').value.trim();
    const password = document.getElementById('adminPassword').value.trim();
    const errorDiv = document.getElementById('loginError');
    
    if (!username || !password) {
        showError(errorDiv, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
        return;
    }
    
    if (username === ADMIN_CREDENTIALS.username && password === ADMIN_CREDENTIALS.password) {
        currentAdmin = {
            username: username,
            loginTime: new Date().toISOString()
        };
        
        localStorage.setItem('ortosalon_admin', JSON.stringify(currentAdmin));
        showAdminDashboard();
    } else {
        showError(errorDiv, '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
}

// –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async function showAdminDashboard() {
    document.getElementById('adminLogin').style.display = 'none';
    document.getElementById('adminDashboard').style.display = 'block';
    document.getElementById('currentAdmin').textContent = currentAdmin.username;
    
    await loadUsers();
    updateStats();
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å –æ–±–ª–∞–∫–æ–º
async function loadUsers() {
    console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞
    if (CLOUD_SYNC_CONFIG.enabled) {
        try {
            console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–ª–∞–∫–∞...');
            const cloudUsers = await getCloudUsers();
            
            if (cloudUsers.length > 0) {
                allUsers = cloudUsers;
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏
                localStorage.setItem('admin_users', JSON.stringify(allUsers));
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–ª–∞–∫–∞`);
            } else {
                console.log('‚ö†Ô∏è –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                allUsers = JSON.parse(localStorage.getItem('admin_users') || '[]');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –æ–±–ª–∞–∫–∞:', error);
            allUsers = JSON.parse(localStorage.getItem('admin_users') || '[]');
        }
    } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        allUsers = JSON.parse(localStorage.getItem('admin_users') || '[]');
    }
    
    displayUsers(allUsers);
    console.log(`üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±–ª–∞–∫–∞
async function getCloudUsers() {
    try {
        const response = await fetch(`${CLOUD_SYNC_CONFIG.baseUrl}/${CLOUD_SYNC_CONFIG.binId}`, {
            method: 'GET',
            headers: {
                'X-Master-Key': CLOUD_SYNC_CONFIG.apiKey,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            return Array.isArray(result.record) ? result.record : [];
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–ª–∞–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ');
            return [];
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞:', error);
        return [];
    }
}

// –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±–ª–∞–∫–æ
async function saveCloudUsers(users) {
    // ‚ö†Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –û–ß–ò–°–¢–ö–ò: –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ –æ–±–ª–∞–∫–æ!
    if (!Array.isArray(users) || users.length === 0) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –æ–±–ª–∞–∫–æ!');
        console.warn('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö.');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        if (typeof alert !== 'undefined') {
            alert('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ü–£–°–¢–û–ô —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±–ª–∞–∫–æ!\n\n–î–∞–Ω–Ω—ã–µ –ù–ï –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ—Ç–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n–ï—Å–ª–∏ –≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.');
        }

        return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    try {
        const existingData = await getCloudUsers();
        if (existingData && existingData.length > 0) {
            console.log(`üì¶ –ë—ç–∫–∞–ø: –í –æ–±–ª–∞–∫–µ —Å–µ–π—á–∞—Å ${existingData.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            localStorage.setItem('admin_users_backup', JSON.stringify(existingData));
            localStorage.setItem('admin_users_backup_time', new Date().toISOString());
        }
    } catch (backupError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø:', backupError);
    }

    try {
        console.log(`‚òÅÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±–ª–∞–∫–æ...`);

        const response = await fetch(`${CLOUD_SYNC_CONFIG.baseUrl}/${CLOUD_SYNC_CONFIG.binId}`, {
            method: 'PUT',
            headers: {
                'X-Master-Key': CLOUD_SYNC_CONFIG.apiKey,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(users)
        });

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–±–ª–∞–∫–æ:', result);
        console.log(`üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±–ª–∞–∫–æ:', error);
        throw error;
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
function displayUsers(users) {
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = '';
    
    users.forEach(user => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${user.id}</td>
            <td>${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</td>
            <td>${user.phone}</td>
            <td>
                <code style="background: #f8f9fa; padding: 2px 6px; border-radius: 3px; font-size: 12px;">
                    ${user.eanCode}
                </code>
            </td>
            <td>${formatDate(user.createdAt)}</td>
            <td>
                <div class="action-buttons">
                    <button onclick="editUser(${user.id})" class="btn-edit">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button onclick="deleteUser(${user.id})" class="btn-delete">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </td>
        `;
        tbody.appendChild(row);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    const today = new Date().toDateString();
    const newUsersToday = allUsers.filter(user => 
        new Date(user.createdAt).toDateString() === today
    ).length;
    
    const activeUsers = allUsers.filter(user => {
        const lastLogin = new Date(user.lastLogin || user.createdAt);
        const daysSince = (Date.now() - lastLogin.getTime()) / (1000 * 60 * 60 * 24);
        return daysSince <= 30; // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    }).length;
    
    document.getElementById('totalUsers').textContent = allUsers.length;
    document.getElementById('newUsersToday').textContent = newUsersToday;
    document.getElementById('activeUsers').textContent = activeUsers;
}

// –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function filterUsers() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
    
    if (!searchTerm) {
        displayUsers(allUsers);
        return;
    }
    
    const filteredUsers = allUsers.filter(user => 
        user.phone.toLowerCase().includes(searchTerm) ||
        (user.name && user.name.toLowerCase().includes(searchTerm)) ||
        user.eanCode.includes(searchTerm)
    );
    
    displayUsers(filteredUsers);
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function refreshUserList() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const refreshBtn = document.querySelector('.btn-refresh');
    const originalText = refreshBtn.textContent;
    refreshBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    refreshBtn.disabled = true;
    
    try {
        await loadUsers();
        updateStats();
        document.getElementById('searchInput').value = '';
        console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
        refreshBtn.textContent = originalText;
        refreshBtn.disabled = false;
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function editUser(userId) {
    const user = allUsers.find(u => u.id === userId);
    if (!user) return;
    
    document.getElementById('editUserId').value = user.id;
    document.getElementById('editUserName').value = user.name || '';
    document.getElementById('editUserPhone').value = user.phone;
    document.getElementById('editUserEAN').value = user.eanCode;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
    document.getElementById('barcodePreview').innerHTML = '';
    
    document.getElementById('editUserModal').classList.add('active');
}

// –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
function previewBarcodeImage() {
    const fileInput = document.getElementById('barcodeImage');
    const preview = document.getElementById('barcodePreview');
    
    if (fileInput.files && fileInput.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
            preview.innerHTML = `<img src="${e.target.result}" alt="–®—Ç—Ä–∏—Ö–∫–æ–¥">`;
        };
        reader.readAsDataURL(fileInput.files[0]);
    }
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
async function saveUserChanges() {
    const userId = parseInt(document.getElementById('editUserId').value);
    const name = document.getElementById('editUserName').value.trim();
    const phone = document.getElementById('editUserPhone').value.trim();
    const eanCode = document.getElementById('editUserEAN').value.trim();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!phone) {
        alert('–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
        return;
    }
    
    if (eanCode && eanCode.length !== 13) {
        alert('EAN –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 13 —Ü–∏—Ñ—Ä');
        return;
    }
    
    // –ù–∞–π–¥—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–∏–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    const userIndex = allUsers.findIndex(u => u.id === userId);
    if (userIndex !== -1) {
        allUsers[userIndex] = {
            ...allUsers[userIndex],
            name: name,
            phone: phone,
            eanCode: eanCode || allUsers[userIndex].eanCode,
            updatedAt: new Date().toISOString()
        };
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            localStorage.setItem('admin_users', JSON.stringify(allUsers));
            
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            const ortosalonUsers = JSON.parse(localStorage.getItem('ortosalon_users') || '[]');
            const ortosalonUserIndex = ortosalonUsers.findIndex(u => u.id === userId);
            if (ortosalonUserIndex !== -1) {
                ortosalonUsers[ortosalonUserIndex] = allUsers[userIndex];
                localStorage.setItem('ortosalon_users', JSON.stringify(ortosalonUsers));
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
            const currentUser = JSON.parse(localStorage.getItem('ortosalon_user') || 'null');
            if (currentUser && currentUser.id === userId) {
                localStorage.setItem('ortosalon_user', JSON.stringify(allUsers[userIndex]));
            }
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–±–ª–∞–∫–æ–º
            if (CLOUD_SYNC_CONFIG.enabled) {
                await saveCloudUsers(allUsers);
                console.log('‚òÅÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –æ–±–ª–∞–∫–æ–º');
            }
            
            closeEditModal();
            displayUsers(allUsers);
            updateStats();
            alert('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
    }
}

// ========== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ==========

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function openAddUserModal() {
    document.getElementById('addUserName').value = '';
    document.getElementById('addUserPhone').value = '';
    document.getElementById('addUserEAN').value = generateEAN13();
    document.getElementById('addBarcodePreview').innerHTML = '';
    document.getElementById('addUserModal').classList.add('active');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ EAN-13
function generateEAN13() {
    let code = '';
    for (let i = 0; i < 12; i++) {
        code += Math.floor(Math.random() * 10);
    }
    // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
    let sum = 0;
    for (let i = 0; i < 12; i++) {
        const digit = parseInt(code[i]);
        sum += (i % 2 === 0) ? digit : digit * 3;
    }
    const checkDigit = (10 - (sum % 10)) % 10;
    return code + checkDigit;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function previewAddBarcodeImage() {
    const fileInput = document.getElementById('addBarcodeImage');
    const preview = document.getElementById('addBarcodePreview');
    if (fileInput.files && fileInput.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
            preview.innerHTML = `<img src="${e.target.result}" alt="–®—Ç—Ä–∏—Ö–∫–æ–¥" style="max-width:150px;">`;
        };
        reader.readAsDataURL(fileInput.files[0]);
    }
}



// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function addNewUser() {
    const name = document.getElementById('addUserName').value.trim();
    const phone = document.getElementById('addUserPhone').value.trim();
    const eanCode = document.getElementById('addUserEAN').value.trim();
    let barcodeImageData = null;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!phone) {
        alert('–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        return;
    }
    if (eanCode.length !== 13) {
        alert('EAN-13 –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 13 —Ü–∏—Ñ—Ä');
        return;
    }

    const fileInput = document.getElementById('addBarcodeImage');
    if (fileInput.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
            barcodeImageData = e.target.result;
            saveUser();
        };
        reader.readAsDataURL(fileInput.files[0]);
    } else {
        saveUser();
    }

    function saveUser() {
        const users = JSON.parse(localStorage.getItem('admin_users') || '[]');
        const newUser = {
            id: Date.now(),
            name,
            phone,
            eanCode,
            barcodeImage: barcodeImageData,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };
        users.push(newUser);
        localStorage.setItem('admin_users', JSON.stringify(users));
        closeAddUserModal();
        loadUsers(); // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!');
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function closeAddUserModal() {
    document.getElementById('addUserModal').classList.remove('active');
}

// –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
async function confirmDeleteUser() {
    const userId = parseInt(document.getElementById('deleteUserId').value);
    
    try {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        allUsers = allUsers.filter(u => u.id !== userId);
        localStorage.setItem('admin_users', JSON.stringify(allUsers));
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
        const ortosalonUsers = JSON.parse(localStorage.getItem('ortosalon_users') || '[]');
        const updatedOrtosalonUsers = ortosalonUsers.filter(u => u.id !== userId);
        localStorage.setItem('ortosalon_users', JSON.stringify(updatedOrtosalonUsers));
        
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        const currentUser = JSON.parse(localStorage.getItem('ortosalon_user') || 'null');
        if (currentUser && currentUser.id === userId) {
            localStorage.removeItem('ortosalon_user');
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–±–ª–∞–∫–æ–º
        if (CLOUD_SYNC_CONFIG.enabled) {
            await saveCloudUsers(allUsers);
            console.log('‚òÅÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –æ–±–ª–∞–∫–æ–º');
        }
        
        closeDeleteModal();
        displayUsers(allUsers);
        updateStats();
        alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function deleteUser(userId) {
    document.getElementById('deleteUserId').value = userId;
    document.getElementById('deleteConfirmModal').classList.add('active');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function closeEditModal() {
    document.getElementById('editUserModal').classList.remove('active');
}

function closeDeleteModal() {
    document.getElementById('deleteConfirmModal').classList.remove('active');
}

// –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
function adminLogout() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
        currentAdmin = null;
        localStorage.removeItem('ortosalon_admin');
        document.getElementById('adminDashboard').style.display = 'none';
        document.getElementById('adminLogin').style.display = 'flex';
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤—Ö–æ–¥–∞
        document.getElementById('adminUsername').value = '';
        document.getElementById('adminPassword').value = '';
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(errorDiv, message) {
    errorDiv.textContent = message;
    setTimeout(() => {
        errorDiv.textContent = '';
    }, 5000);
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
window.onclick = function(event) {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        if (event.target === modal) {
            modal.classList.remove('active');
        }
    });
}

// üîß –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ë–≠–ö–ê–ü–ê
async function restoreFromBackup() {
    const backup = localStorage.getItem('admin_users_backup');
    const backupTime = localStorage.getItem('admin_users_backup_time');

    if (!backup) {
        alert('‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n–í–æ–∑–º–æ–∂–Ω–æ, –±—ç–∫–∞–ø –µ—â–µ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.');
        return;
    }

    const backupDate = backupTime ? new Date(backupTime).toLocaleString('ru-RU') : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const confirmRestore = confirm(
        `üîÑ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ë–≠–ö–ê–ü–ê\n\n` +
        `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: ${backupDate}\n\n` +
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞?\n\n` +
        `–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞.`
    );

    if (!confirmRestore) {
        return;
    }

    try {
        const backupUsers = JSON.parse(backup);

        if (!Array.isArray(backupUsers) || backupUsers.length === 0) {
            alert('‚ùå –ë—ç–∫–∞–ø –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!');
            return;
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
        allUsers = backupUsers;
        localStorage.setItem('admin_users', JSON.stringify(allUsers));

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –æ–±–ª–∞–∫–æ
        if (CLOUD_SYNC_CONFIG.enabled) {
            await saveCloudUsers(allUsers);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        displayUsers(allUsers);
        updateStats();

        alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${backupUsers.length}\n–î–∞—Ç–∞ –±—ç–∫–∞–ø–∞: ${backupDate}`);
        console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${backupUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±—ç–∫–∞–ø–∞`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞:', error);
        alert(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—ç–∫–∞–ø–∞!\n\n${error.message}`);
    }
}

// üìä –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ë–≠–ö–ê–ü–ï
function showBackupInfo() {
    const backup = localStorage.getItem('admin_users_backup');
    const backupTime = localStorage.getItem('admin_users_backup_time');

    if (!backup) {
        alert('‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–≠–ö–ê–ü–ï\n\n–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ.');
        return;
    }

    try {
        const backupUsers = JSON.parse(backup);
        const backupDate = backupTime ? new Date(backupTime).toLocaleString('ru-RU') : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        let message = `üì¶ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–≠–ö–ê–ü–ï\n\n`;
        message += `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${backupDate}\n`;
        message += `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${backupUsers.length}\n\n`;

        if (backupUsers.length > 0) {
            message += `–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±—ç–∫–∞–ø–µ:\n`;
            backupUsers.slice(-5).forEach(user => {
                message += `  ‚Ä¢ ${user.name} (${user.phone})\n`;
            });
        }

        alert(message);
        console.log('üì¶ –ë—ç–∫–∞–ø —Å–æ–¥–µ—Ä–∂–∏—Ç:', backupUsers);

    } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±—ç–∫–∞–ø–∞!\n\n–ë—ç–∫–∞–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.');
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±—ç–∫–∞–ø–∞:', error);
    }
}

// üíæ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê –ë–≠–ö–ê–ü–ê –í –§–ê–ô–õ
function exportBackupToFile() {
    const backup = localStorage.getItem('admin_users_backup');
    const backupTime = localStorage.getItem('admin_users_backup_time');

    if (!backup) {
        alert('‚ùå –ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }

    try {
        const backupUsers = JSON.parse(backup);
        const backupDate = backupTime ? new Date(backupTime).toISOString().split('T')[0] : 'unknown';

        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π JSON –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const exportData = {
            backup_date: backupTime || new Date().toISOString(),
            users_count: backupUsers.length,
            users: backupUsers
        };

        const dataStr = JSON.stringify(exportData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });

        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(dataBlob);
        downloadLink.download = `ortosalon_backup_${backupDate}.json`;
        downloadLink.click();

        alert(`‚úÖ –ë—ç–∫–∞–ø —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n\n–§–∞–π–ª: ortosalon_backup_${backupDate}.json\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${backupUsers.length}`);

    } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—ç–∫–∞–ø–∞!');
        console.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    }
}


// ==================== SMS –†–ê–°–°–´–õ–ö–ê –í –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò ====================

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMS (—Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
const SMS_CONFIG = {
    login: 'ortosalon.tj',
    hash: 'c908aeb36c62699337e59e6d78aeeeaa',
    sender: 'OrtosalonTj',
    server: 'https://api.osonsms.com/sendsms_v1.php'
};

// –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏
let broadcastStatus = {
    isRunning: false,
    sent: 0,
    failed: 0,
    total: 0,
    currentUser: null
};

// ==================== –§–£–ù–ö–¶–ò–ò –†–ê–°–°–´–õ–ö–ò ====================

// –û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∏
function openBroadcastModal() {
    document.getElementById('broadcastMessage').value = '';
    document.getElementById('broadcastRecipients').value = 'all';
    document.getElementById('broadcastModal').classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    updateRecipientCount();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
function updateRecipientCount() {
    const recipientType = document.getElementById('broadcastRecipients').value;
    let count = 0;
    
    switch (recipientType) {
        case 'all':
            count = allUsers.length;
            break;
        case 'today':
            const today = new Date().toDateString();
            count = allUsers.filter(user => 
                new Date(user.createdAt).toDateString() === today
            ).length;
            break;
        case 'week':
            const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
            count = allUsers.filter(user => 
                new Date(user.createdAt) >= weekAgo
            ).length;
            break;
        case 'active':
            const monthAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
            count = allUsers.filter(user => {
                const lastLogin = new Date(user.lastLogin || user.createdAt);
                return lastLogin >= monthAgo;
            }).length;
            break;
    }
    
    document.getElementById('recipientCount').textContent = count;
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø—É
function getRecipients(type) {
    switch (type) {
        case 'all':
            return allUsers;
        
        case 'today':
            const today = new Date().toDateString();
            return allUsers.filter(user => 
                new Date(user.createdAt).toDateString() === today
            );
        
        case 'week':
            const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
            return allUsers.filter(user => 
                new Date(user.createdAt) >= weekAgo
            );
        
        case 'active':
            const monthAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
            return allUsers.filter(user => {
                const lastLogin = new Date(user.lastLogin || user.createdAt);
                return lastLogin >= monthAgo;
            });
        
        default:
            return [];
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ SHA256 —Ö–µ—à–∞ –¥–ª—è SMS API
async function createSHA256Hash(text) {
    const encoder = new TextEncoder();
    const data = encoder.encode(text);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ SMS
async function sendSingleSMS(phone, message, txnId) {
    try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä (—É–±–∏—Ä–∞–µ–º + –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É 992XXXXXXXXX)
        let formattedPhone = phone.replace(/[^0-9]/g, '');
        if (phone.startsWith('+992') && !formattedPhone.startsWith('992')) {
            formattedPhone = '992' + formattedPhone.substring(3);
        }
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ ${phone} (${formattedPhone})`);
        
        // –°–æ–∑–¥–∞–µ–º —Ö–µ—à
        const hashString = `${txnId};${SMS_CONFIG.login};${SMS_CONFIG.sender};${formattedPhone};${SMS_CONFIG.hash}`;
        const hash = await createSHA256Hash(hashString);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API
        const smsUrl = `${SMS_CONFIG.server}?from=${SMS_CONFIG.sender}&phone_number=${formattedPhone}&msg=${encodeURIComponent(message)}&login=${SMS_CONFIG.login}&str_hash=${hash}&txn_id=${txnId}`;
        
        const response = await fetch(smsUrl);
        const result = await response.json();
        
        if (response.status === 201 && result.status === 'ok') {
            console.log(`‚úÖ SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${phone}`);
            return { success: true, phone, result };
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –Ω–∞ ${phone}:`, result);
            return { success: false, phone, error: result };
        }
        
    } catch (error) {
        console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS –Ω–∞ ${phone}:`, error);
        return { success: false, phone, error: error.message };
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async function startBroadcast() {
    const message = document.getElementById('broadcastMessage').value.trim();
    const recipientType = document.getElementById('broadcastRecipients').value;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!message) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
        return;
    }
    
    if (message.length > 160) {
        if (!confirm('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 160 —Å–∏–º–≤–æ–ª–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
            return;
        }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    const recipients = getRecipients(recipientType);
    
    if (recipients.length === 0) {
        alert('–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
        return;
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if (!confirm(`–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${recipients.length} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º?\n\n–¢–µ–∫—Å—Ç: "${message}"`)) {
        return;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcastStatus = {
        isRunning: true,
        sent: 0,
        failed: 0,
        total: recipients.length,
        currentUser: null
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    updateBroadcastProgress();
    document.getElementById('startBroadcastBtn').disabled = true;
    document.getElementById('stopBroadcastBtn').disabled = false;
    
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${recipients.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`);
    
    // –†–∞—Å—Å—ã–ª–∫–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    for (let i = 0; i < recipients.length && broadcastStatus.isRunning; i++) {
        const user = recipients[i];
        broadcastStatus.currentUser = user.name || user.phone;
        
        updateBroadcastProgress();
        
        const txnId = `${Date.now()}_${i}`;
        const result = await sendSingleSMS(user.phone, message, txnId);
        
        if (result.success) {
            broadcastStatus.sent++;
        } else {
            broadcastStatus.failed++;
        }
        
        updateBroadcastProgress();
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
        if (i < recipients.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
    
    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcastStatus.isRunning = false;
    broadcastStatus.currentUser = null;
    
    document.getElementById('startBroadcastBtn').disabled = false;
    document.getElementById('stopBroadcastBtn').disabled = true;
    
    console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${broadcastStatus.sent}, –û—à–∏–±–æ–∫: ${broadcastStatus.failed}`);
    alert(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${broadcastStatus.sent}\n–û—à–∏–±–æ–∫: ${broadcastStatus.failed}`);
    
    updateBroadcastProgress();
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
function stopBroadcast() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?')) {
        broadcastStatus.isRunning = false;
        document.getElementById('startBroadcastBtn').disabled = false;
        document.getElementById('stopBroadcastBtn').disabled = true;
        console.log('üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
function updateBroadcastProgress() {
    const progressBar = document.getElementById('broadcastProgress');
    const progressText = document.getElementById('broadcastProgressText');
    const currentUserSpan = document.getElementById('currentUser');
    
    if (broadcastStatus.total > 0) {
        const percent = Math.round(((broadcastStatus.sent + broadcastStatus.failed) / broadcastStatus.total) * 100);
        progressBar.style.width = percent + '%';
        
        progressText.textContent = `${broadcastStatus.sent + broadcastStatus.failed} / ${broadcastStatus.total} (${percent}%)`;
        
        if (broadcastStatus.currentUser) {
            currentUserSpan.textContent = `–û—Ç–ø—Ä–∞–≤–∫–∞: ${broadcastStatus.currentUser}`;
        } else {
            currentUserSpan.textContent = `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${broadcastStatus.sent}, –û—à–∏–±–æ–∫: ${broadcastStatus.failed}`;
        }
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
function closeBroadcastModal() {
    if (broadcastStatus.isRunning) {
        if (!confirm('–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ?')) {
            return;
        }
        stopBroadcast();
    }
    document.getElementById('broadcastModal').classList.remove('active');
}

// –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
const messageTemplates = {
    welcome: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OrtosalonTj! –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.',
    promo: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å! –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å—é –æ—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é.',
    reminder: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–µ!',
    newProduct: '–ù–æ–≤–∏–Ω–∫–∞ –≤ OrtosalonTj! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∏ –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –æ—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.'
};

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function applyMessageTemplate(templateKey) {
    const message = messageTemplates[templateKey];
    if (message) {
        document.getElementById('broadcastMessage').value = message;
    }
}

// –°—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
function updateCharacterCount() {
    const message = document.getElementById('broadcastMessage').value;
    const count = message.length;
    const counter = document.getElementById('characterCount');
    
    counter.textContent = `${count}/160`;
    
    if (count > 160) {
        counter.style.color = '#ff6b6b';
    } else if (count > 140) {
        counter.style.color = '#ffa726';
    } else {
        counter.style.color = '#666';
    }
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    const recipientsSelect = document.getElementById('broadcastRecipients');
    if (recipientsSelect) {
        recipientsSelect.addEventListener('change', updateRecipientCount);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—á–µ—Ç—á–∏–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤
    const messageTextarea = document.getElementById('broadcastMessage');
    if (messageTextarea) {
        messageTextarea.addEventListener('input', updateCharacterCount);
    }
    
    console.log('üì± SMS —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
});
